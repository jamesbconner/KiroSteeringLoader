name: PR Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  validate-pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check for breaking changes
      run: |
        # Check if package.json version has been updated for breaking changes
        git diff origin/main -- package.json | grep -q '"version"' || echo "No version change detected"

    - name: Run tests with coverage
      run: npm run test:coverage

    - name: Check coverage delta
      run: |
        # Compare coverage with main branch
        git checkout origin/main
        npm ci
        npm run test:coverage
        mv coverage/coverage-final.json coverage/coverage-main.json
        
        git checkout -
        npm ci
        npm run test:coverage
        
        # Calculate coverage difference
        node -e "
          const fs = require('fs');
          const mainCoverage = JSON.parse(fs.readFileSync('coverage/coverage-main.json', 'utf8'));
          const prCoverage = JSON.parse(fs.readFileSync('coverage/coverage-final.json', 'utf8'));
          
          const calculateTotalCoverage = (coverage) => {
            const totals = Object.values(coverage).reduce((acc, file) => {
              Object.keys(file).forEach(key => {
                if (key !== 'path') {
                  acc[key] = (acc[key] || { total: 0, covered: 0 });
                  acc[key].total += file[key].total || 0;
                  acc[key].covered += file[key].covered || 0;
                }
              });
              return acc;
            }, {});
            return (totals.lines.covered / totals.lines.total) * 100;
          };
          
          const mainPercent = calculateTotalCoverage(mainCoverage);
          const prPercent = calculateTotalCoverage(prCoverage);
          const delta = prPercent - mainPercent;
          
          console.log(\`Main branch coverage: \${mainPercent.toFixed(2)}%\`);
          console.log(\`PR coverage: \${prPercent.toFixed(2)}%\`);
          console.log(\`Coverage delta: \${delta > 0 ? '+' : ''}\${delta.toFixed(2)}%\`);
          
          if (delta < -2) {
            console.log('Coverage decreased by more than 2%. Please add tests.');
            process.exit(1);
          }
          
          if (prPercent < 85) {
            console.log('Coverage is below 85% threshold.');
            process.exit(1);
          }
        "

    - name: Run E2E tests
      run: npm run test:e2e

    - name: Performance impact check
      run: |
        # Run performance tests and compare with baseline
        npm run test:performance
        
        if [ -f "coverage/performance-baseline.json" ]; then
          node -e "
            const fs = require('fs');
            const current = JSON.parse(fs.readFileSync('coverage/performance-results.json', 'utf8'));
            const baseline = JSON.parse(fs.readFileSync('coverage/performance-baseline.json', 'utf8'));
            
            const activationDelta = ((current.activationTime - baseline.activationTime) / baseline.activationTime) * 100;
            const memoryDelta = ((current.memoryUsage - baseline.memoryUsage) / baseline.memoryUsage) * 100;
            
            console.log(\`Activation time change: \${activationDelta > 0 ? '+' : ''}\${activationDelta.toFixed(2)}%\`);
            console.log(\`Memory usage change: \${memoryDelta > 0 ? '+' : ''}\${memoryDelta.toFixed(2)}%\`);
            
            if (activationDelta > 15) {
              console.log('Activation time increased by more than 15%. Performance regression detected.');
              process.exit(1);
            }
            
            if (memoryDelta > 20) {
              console.log('Memory usage increased by more than 20%. Memory regression detected.');
              process.exit(1);
            }
          "
        fi

    - name: Comment PR with test results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## üß™ Test Results\n\n';
          
          // Add coverage information
          if (fs.existsSync('coverage/coverage-final.json')) {
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-final.json', 'utf8'));
            const totals = Object.values(coverage).reduce((acc, file) => {
              Object.keys(file).forEach(key => {
                if (key !== 'path') {
                  acc[key] = (acc[key] || { total: 0, covered: 0 });
                  acc[key].total += file[key].total || 0;
                  acc[key].covered += file[key].covered || 0;
                }
              });
              return acc;
            }, {});
            const linesCoverage = (totals.lines.covered / totals.lines.total) * 100;
            
            comment += `### Coverage: ${linesCoverage.toFixed(2)}%\n`;
            comment += linesCoverage >= 85 ? '‚úÖ Coverage threshold met\n\n' : '‚ùå Coverage below 85% threshold\n\n';
          }
          
          // Add performance information
          if (fs.existsSync('coverage/performance-results.json')) {
            const perf = JSON.parse(fs.readFileSync('coverage/performance-results.json', 'utf8'));
            comment += '### Performance\n';
            comment += `- Activation Time: ${perf.activationTime}ms\n`;
            comment += `- Memory Usage: ${perf.memoryUsage}MB\n\n`;
          }
          
          // Add test summary
          if (fs.existsSync('coverage/test-results.json')) {
            const results = JSON.parse(fs.readFileSync('coverage/test-results.json', 'utf8'));
            comment += '### Test Summary\n';
            comment += `- Total Tests: ${results.numTotalTests}\n`;
            comment += `- Passed: ${results.numPassedTests} ‚úÖ\n`;
            comment += `- Failed: ${results.numFailedTests} ${results.numFailedTests > 0 ? '‚ùå' : '‚úÖ'}\n`;
            comment += `- Success Rate: ${((results.numPassedTests / results.numTotalTests) * 100).toFixed(1)}%\n\n`;
          }
          
          comment += '---\n*This comment was automatically generated by the PR validation workflow.*';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  security-check:
    name: Security Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: |
        # Check for vulnerabilities
        npm audit --audit-level=moderate
        
        # Fail on high or critical vulnerabilities
        AUDIT_RESULT=$(npm audit --json --audit-level=high)
        HIGH_VULNS=$(echo "$AUDIT_RESULT" | jq '.metadata.vulnerabilities.high // 0')
        CRITICAL_VULNS=$(echo "$AUDIT_RESULT" | jq '.metadata.vulnerabilities.critical // 0')
        
        if [ "$HIGH_VULNS" -gt 0 ] || [ "$CRITICAL_VULNS" -gt 0 ]; then
          echo "Security vulnerabilities found! High: $HIGH_VULNS, Critical: $CRITICAL_VULNS"
          exit 1
        fi

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: TypeScript compilation check
      run: |
        npx tsc --noEmit
        npm run compile

    - name: Check for TODO/FIXME comments
      run: |
        TODO_COUNT=$(grep -r "TODO\|FIXME" src/ tests/ --include="*.ts" | wc -l)
        echo "Found $TODO_COUNT TODO/FIXME comments"
        
        if [ "$TODO_COUNT" -gt 10 ]; then
          echo "Too many TODO/FIXME comments ($TODO_COUNT). Please address some before merging."
          exit 1
        fi

    - name: Check file sizes
      run: |
        # Check for large files that might indicate issues
        find src/ tests/ -name "*.ts" -size +50k -exec echo "Large file found: {}" \;
        
        LARGE_FILES=$(find src/ tests/ -name "*.ts" -size +50k | wc -l)
        if [ "$LARGE_FILES" -gt 0 ]; then
          echo "Found $LARGE_FILES large TypeScript files. Consider refactoring."
        fi